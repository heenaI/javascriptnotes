JavaScript notes:


#parameters:
to setup a parameter to default value if it is undefined

```
parameter = parameter || 'parameter default value'
```

In this the parameter will first look for given parameter if it is undefined then it will take the default value.

usage example:
```
function  example(parameterValue){
parameterValue = parameterValue || 'please give value'

console.log(parameterValue)
}

example();
example('xyz');
```

to check if the function has arguments console.log(arguments) for example

```
example(){
	console.log(arguments)
}
```


#Function Expression:

```
//IIFE
If a function is wrapped in parenthesis JavaScript parser thinks it is an expression
(function(){
console.log('invoke me!')
})();
```
usage
```
function createAnObject(name, language){
if(language='es'){
console.log(name+ ' ' +'hola') 
} else if(language='en'){
console.log(name+  ' ' +'hello')
}
}

createAnObject('John Doe', (function(){
return 'es';
})());
```

#Callback
When you call a function it calls another function this is called a call back(i.e i call a function and it calls another functions)
example 
```
function makeCallback(callback){
callback();
}

 makeCallback(function(){
 console.log('i am the callback function')
 })


 ```

 All functions have call(), apply() and bind() method
 bind() creates a copy of the function rather then changing the original function and add this variable.  foo.bind(thisVariable)
 call() executes the original function and you can also pass parameters to it. foo.call(thisVariable, parameter1, parameter2)
 apply() does the same thing but needs parameters in array foo.apply(thisVariable, [parameter1, parameter2])

 Scenarios it can be used:

 function Borrowing:
 Borrowing methods from for example object literals. e.g
e.g
```
var objOne = {
 firstName : 'captain',
 secondName: 'crook',
 combineName: function(lang){
 if(lang=='en'){
 var greet = 'Hello'+ ' ' + this.firstName + ' ' + this.secondName
 return greet
 
 } else if(lang=='de'){
 var greet = 'Hallo'+ ' ' + this.firstName + ' ' + this.secondName
 return greet
 
 }
 
 }
 }
 
 var objTwo = {
 firstName: 'Allan',
 secondName: 'Woodcourt'
 }
 
 
var result = objOne.combineName.call(objTwo, 'de')

console.log(result)
```
Function Currying
binding a function to some parameter that when it executes it always uses that variable 

e.g 
```
 function add(a, b){
 return a+b
 }
 
 var adding = add.bind(this, 2) //bind only creates a copy of the function this statement is equal to var a =2;
 
 console.log(adding(5))
 ```


map object:

 map object creates a copy of original array and executes a function on each element and returns an array. The difference between map and forEach is that forEach does not return any thing so this is useful where for example we need to execute some function times elements in the array.

example for map
```
var array = [1, 2, 3, 4]

var mappingArray = function(element){
return element*2
 
}


console.log(array.map(mappingArray))
```

Functional Programming:

var arr = [1, 2, 3]

//first order function

function arrayClean(arr, fn){
var newArr = []
	for(var i=0; i<arr.length; i++){
  newArr.push(fn(arr[i]))
  }
  return newArr
};


var arr2 = arrayClean(arr, function(item){
return item*2 
}
)

console.log(arr2)

// using strict mode elimanitaes some bugs such as if you forgot to add var to a new variable javascript wont create a global object. if you accidentally call a method or constructor incorrectly in strict mode, JavaScript will produce an error as soon as it tries to read something from this

"use strict";
function person(name){
this.name = name
}
// It creates a new object. The type of this object, is simply object.
// It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
// It makes the this variable point to the newly created object.
// It executes the constructor function, using the newly created object whenever this is mentioned.
// It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
//Note: constructor function refers the function after the new keyword, as in 

var newPerson = new person('new')

console.log(newPerson)



